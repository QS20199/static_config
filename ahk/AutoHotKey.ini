Process, Priority, , High
#InstallKeybdHook
#MaxHotkeysPerInterval 2000

#q::sendInput #{left} ;左右最大化
#w::sendInput #{right}

;#`:: run H:\vop_mobile_proj\src\open_cft\src\conf\build.bat


#InstallMouseHook

#IfWinActive ahk_class TankWindowClass
XButton2::
{
return
}

#IfWinActive ahk_class WindowsForms10.Window.8.app.0.33c0d9d ;fiddler GO
^d::
{
CoordMode Mouse,Screen
MouseGetPos, KDE_X1, KDE_Y1, KDE_id
WinGetPos, KDE_WinX1, KDE_WinY1
MouseClick, left, KDE_WinX1+260, KDE_WinY1+60,1 ,1
MouseMove, KDE_X1,KDE_Y1, 1
return
}

#IfWinActive ahk_class ConsoleWindowClass ;cmd复制
^v::
{
SendInput %Clipboard%
return
}


#IfWinActive ahk_class DSUI:PDFXCViewer ;PDF全屏
CapsLock::SendInput {F12}

;chrome
#IfWinActive ahk_class Chrome_WidgetWin_1
F3::F8
F1::F12
F2::F10
F4::F11
+F4::+F11
!r::SendInput ^r
XButton2::
{
SendInput ^{w}
return
}


;VS CODE切换项目
^!p::
{
SendInput !o
sleep, 10
SendInput fileopenrecent 
sleep, 10
SendInput {enter}
return
}

;一键开启webview调试
;准备工作
;1.inspect页面固定在第一个标签
;2.打开Devtool的console tab
;3.此时在Chrome中只需按下Ctrl+Shift+v 即可快速打开活动的webview调试页面
^+v::
{
ClipSaved := ClipboardAll ;保存剪贴板
CoordMode Mouse, Relative ;鼠标点击模式:相对于窗口

MouseGetPos, KDE_X1, KDE_Y1, KDE_id ;保存原始鼠标位置
MouseClick, left, 42, 20,1 ,1 ;激活inspect页面, 位置可自己自定义
sleep,10
WinGetPos,KDE_WinX1, KDE_WinY1, KDE_WinW, KDE_WinH 
MouseClick, left, KDE_WinW-200, 200,1 ,1 ;激活控制台区域
clipboard := "(function(){var p=document.querySelectorAll('.position')`;p=Array.prototype.slice.call(p)`;p.forEach(function(el,index){if(!el.parentNode.querySelectorAll('.visibility').length){el.parentNode.parentNode.querySelector('.action').click()`;return}})})()"
send ^v
send {enter}
MouseMove, KDE_X1,KDE_Y1, 1
clipboard := ClipSaved ;还原剪贴板
return
}
;chrome end

#IfWinActive ahk_class ytWindow
XButton2::
{
SendInput {Esc}
return
}


#IfWinActive ahk_class YdMiniModeWndClassName ;有道词典
^+w:: SendInput {Esc}

#IfWinActive ;声音
#WheelUp::Volume_Up
#WheelDown::Volume_Down

;Ctrl 的符号是 ^
;Alt 的符号是 !
;Shift 的符号是 +
;Window #
;^space::SendInput #{space}
;NumLock::,
!^+j::SendInput {Shift down}{left}{Shift up}
!^+u::SendInput {Shift down}{left 5}{Shift up}
!^+k::SendInput {Shift down}{down}{Shift up}
!^+l::SendInput {Shift down}{right}{Shift up}
!^+o::SendInput {Shift down}{right 5 w}{Shift up}
!^+i::SendInput {Shift down}{up}{Shift up}
PgUp::SendInput ^+{left}
PgDn::SendInput ^+{right}

::enld::endl
!i::SendInput {WheelUp}
!k::SendInput {WheelDown}
^k::SendInput {down}
^i::SendInput {up}
^l::SendInput {right}
^j::SendInput {left}
^+i::run "D:\Program Files (x86)\kingsoft\kwifi\kwifi.exe"
^!+a::run "C:\Program Files (x86)\SogouInput\Components\ScreenCapture\1.0.0.160\screencapture.exe"
!u::SendInput {BackSpace 5}

XButton1::F7
XButton2::
{
SendInput !{F4}
return
}
;NumLock::Backspace
Home::Delete
^u::SendInput {left 5}
^o::SendInput {right 5}
!j::SendInput {BackSpace}
^BackSpace::send {Delete}
!l::SendInput {Delete}
!`::run H:\
^!k::run taskkill /im AutoHotkey.exe
AppsKey::send {Volume_Mute}
^Esc::run taskmgr.exe
^+!z:: run D:\Program Files (x86)\Sublime Text Protable\sublime_text.exe
^+z:: run "D:\Program Files (x86)\EditPlus\EditPlus.exe"
;C:\Windows\System32\notepad.exe
^!c:: run C:\Windows\System32\calc.exe
^+q:: run "D:\Program Files (x86)\Tencent\QQLite\Bin\QQ.exe"
^+t:: run "D:\Program Files (x86)\Tencent\QQDownload\QQDownload.exe"
^+h:: run "G:\mspaint.exe"
;^+y::run "C:\Program Files (x86)\Evernote\Evernote\Evernote.exe"
^!w:: run "D:\Program Files\Microsoft Office\Office15\WINWORD.EXE"
^!x:: run "D:\Program Files\Microsoft Office\Office15\EXCEL.EXE"
^!m:: run F:\Program Files (x86)\MacType\MacTray.exe
^!v:: run "D:\Program Files (x86)\JetBrains\WebStorm 10.0.4\bin\WebStorm.exe"
^!+x:: run "D:\Program Files (x86)\NetSarang\Xshell 5\Xshell.exe"
^!+e:: run "E:\同步\文档\mnet.txt"

^+g:: run "G:\ScreenToGif 1.4.1.exe"
Pause:: run "H:\脚本\lock.bat"
!w::!F4
#IfWinActive ahk_class CabinetWClass
^f::
{
Send {F4}
sleep,200
SendInput ^a
sleep,100
SendInput ^c
sleep,100
SendInput ^q
sleep,100
SendInput {"}
sleep,100
SendInput ^v
sleep,100
SendInput {"}
sleep,100
SendInput {Space}
return
}

#IfWinActive




;win键 按住鼠标移动窗口 双击左键切换最大化
#LButton::
CoordMode, Mouse  ; Switch to screen/absolute coordinates.
MouseGetPos, EWD_MouseStartX, EWD_MouseStartY, EWD_MouseWin
WinGet,winstat,MinMax,ahk_id %EWD_MouseWin%
if(winstat <> 1)
{
    WinGetPos, EWD_OriginalPosX, EWD_OriginalPosY,,, ahk_id %EWD_MouseWin%
    SetTimer, EWD_WatchMouse, 10 ; Track the mouse as the user drags it.
}
Keywait, LButton, , t0.2 ; 双击判断，等待第二次按键
if errorlevel <> 1 ; 
{
   Keywait, LButton, d, t0.1 ; 判断第二次按键是否是鼠标左键
   if errorlevel = 0
   {
       if(winstat = 1) ; 切换窗口状态
           WinRestore,ahk_id %EWD_MouseWin%
       else
           WinMaximize,ahk_id %EWD_MouseWin%
   }
}



CoordMode, Mouse  ; Switch to screen/absolute coordinates.
MouseGetPos, EWD_MouseStartX, EWD_MouseStartY, EWD_MouseWin
WinGetPos, EWD_OriginalPosX, EWD_OriginalPosY,,, ahk_id %EWD_MouseWin%
WinGet, EWD_WinState, MinMax, ahk_id %EWD_MouseWin% 
if EWD_WinState = 0  ; Only if the window isn't maximized 
    SetTimer, EWD_WatchMouse, 10 ; Track the mouse as the user drags it.
return

EWD_WatchMouse:
GetKeyState, EWD_LButtonState, LButton, P
if EWD_LButtonState = U  ; Button has been released, so drag is complete.
{
    SetTimer, EWD_WatchMouse, off
    return
}
GetKeyState, EWD_EscapeState, Escape, P
if EWD_EscapeState = D  ; Escape has been pressed, so drag is cancelled.
{
    SetTimer, EWD_WatchMouse, off
    WinMove, ahk_id %EWD_MouseWin%,, %EWD_OriginalPosX%, %EWD_OriginalPosY%
    return
}
; Otherwise, reposition the window to match the change in mouse coordinates
; caused by the user having dragged the mouse:
CoordMode, Mouse
MouseGetPos, EWD_MouseX, EWD_MouseY
WinGetPos, EWD_WinX, EWD_WinY,,, ahk_id %EWD_MouseWin%
SetWinDelay, -1   ; Makes the below move faster/smoother.
WinMove, ahk_id %EWD_MouseWin%,, EWD_WinX + EWD_MouseX - EWD_MouseStartX, EWD_WinY + EWD_MouseY - EWD_MouseStartY
EWD_MouseStartX := EWD_MouseX  ; Update for the next timer-call to this subroutine.
EWD_MouseStartY := EWD_MouseY
return




; Easy Window Dragging -- KDE style (requires XP/2k/NT) -- by Jonny
; http://www.autohotkey.com
; This script makes it much easier to move or resize a window: 1) Hold down
; the ALT key and LEFT-click anywhere inside a window to drag it to a new
; location; 2) Hold down ALT and RIGHT-click-drag anywhere inside a window
; to easily resize it; 3) Press ALT twice, but before releasing it the second
; time, left-click to minimize the window under the mouse cursor, right-click
; to maximize it, or middle-click to close it.

; This script was inspired by and built on many like it
; in the forum. Thanks go out to ck, thinkstorm, Chris,
; and aurelian for a job well done.

; Change history:
; November 07, 2006: Optimized resizing code in !RButton, courtesy of bluedawn.
; February 05, 2006: Fixed double-alt (the ~Alt hotkey) to work with latest versions of AHK.

; The Double-Alt modifier is activated by pressing
; Alt twice, much like a double-click. Hold the second
; press down until you click.
;
; The shortcuts:
;  Alt + Left Button  : Drag to move a window.
;  Alt + Right Button : Drag to resize a window.
;  Double-Alt + Left Button   : Minimize a window.
;  Double-Alt + Right Button  : Maximize/Restore a window.
;  Double-Alt + Middle Button : Close a window.
;
; You can optionally release Alt after the first
; click rather than holding it down the whole time.




; This is the setting that runs smoothest on my
; system. Depending on your video card and cpu
; power, you may want to raise or lower this value.
;SetWinDelay,-1

#RButton::
SetWinDelay, -1
; Get the initial mouse position and window id, and
; abort if the window is maximized.
MouseGetPos,KDE_X1,KDE_Y1,KDE_id
WinGet,KDE_Win,MinMax,ahk_id %KDE_id%
; Get the initial window position and size.
WinGetPos,KDE_WinX1,KDE_WinY1,KDE_WinW,KDE_WinH,ahk_id %KDE_id%
; Define the window region the mouse is currently in.
; The four regions are Up and Left, Up and Right, Down and Left, Down and Right.

SetTimer, EWD_WatchMouse2, 10 ; Track the mouse as the user drags it.

EWD_WatchMouse2:
GetKeyState,KDE_Button,RButton,P ; Break if button has been released.
If KDE_Button = U
{
SetTimer, EWD_WatchMouse2, off
return
}
MouseGetPos,KDE_X2,KDE_Y2 ; Get the current mouse position.
; Get the current window position and size.
WinGetPos,KDE_WinX1,KDE_WinY1,KDE_WinW,KDE_WinH,ahk_id %KDE_id%
KDE_X2 -= KDE_X1 ; Obtain an offset from the initial mouse position.
KDE_Y2 -= KDE_Y1
; Then, act according to the defined region.


 WinMove,ahk_id %KDE_id%,, KDE_WinX1 ; X of resized window
            , KDE_WinY1 ; Y of resized window
            , KDE_WinW  + KDE_X2  ; W of resized window
            , KDE_WinH + KDE_Y2  ; H of resized window


KDE_X1 := (KDE_X2 + KDE_X1) ; Reset the initial position for the next iteration.
KDE_Y1 := (KDE_Y2 + KDE_Y1)
return

;

; windows+双击中键 窗口最大化
#MButton::
CoordMode, Mouse  ; Switch to screen/absolute coordinates.
MouseGetPos, EWD_MouseStartX, EWD_MouseStartY, EWD_MouseWin
WinGet,winstat,MinMax,ahk_id %EWD_MouseWin%
if(winstat <> 1)
{
    WinGetPos, EWD_OriginalPosX, EWD_OriginalPosY,,, ahk_id %EWD_MouseWin%
    SetTimer, EWD_WatchMouse, 10 ; Track the mouse as the user drags it.
}
Keywait, MButton, , t0.2 ; 双击判断，等待第二次按键
if errorlevel <> 1 ; 
{
   Keywait, MButton, d, t0.1 ; 判断第二次按键是否是鼠标左键
   if errorlevel = 0
   {
MouseGetPos,KDE_X1,KDE_Y1,KDE_id
WinGet,KDE_Win,MinMax,ahk_id %KDE_id%
WinMove,ahk_id %KDE_id%,, 0 ; X of resized window
           , 0 ; Y of resized window
           , 1920  ; W of resized window
           , 1040  ; H of resized window
   }
}
